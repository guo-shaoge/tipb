// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topsql_agent.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CPUTimeRecord struct {
	SqlDigest  []byte `protobuf:"bytes,1,opt,name=sql_digest,json=sqlDigest,proto3" json:"sql_digest,omitempty"`
	PlanDigest []byte `protobuf:"bytes,2,opt,name=plan_digest,json=planDigest,proto3" json:"plan_digest,omitempty"`
	// The following 2 repeated zipped together represents a List<(UnixTimestamp, CPUTime)>
	RecordListTimestampSec []uint64 `protobuf:"varint,10,rep,packed,name=record_list_timestamp_sec,json=recordListTimestampSec" json:"record_list_timestamp_sec,omitempty"`
	RecordListCpuTimeMs    []uint32 `protobuf:"varint,11,rep,packed,name=record_list_cpu_time_ms,json=recordListCpuTimeMs" json:"record_list_cpu_time_ms,omitempty"`
	IsInternalSql          bool     `protobuf:"varint,20,opt,name=is_internal_sql,json=isInternalSql,proto3" json:"is_internal_sql,omitempty"`
}

func (m *CPUTimeRecord) Reset()                    { *m = CPUTimeRecord{} }
func (m *CPUTimeRecord) String() string            { return proto.CompactTextString(m) }
func (*CPUTimeRecord) ProtoMessage()               {}
func (*CPUTimeRecord) Descriptor() ([]byte, []int) { return fileDescriptorTopsqlAgent, []int{0} }

func (m *CPUTimeRecord) GetSqlDigest() []byte {
	if m != nil {
		return m.SqlDigest
	}
	return nil
}

func (m *CPUTimeRecord) GetPlanDigest() []byte {
	if m != nil {
		return m.PlanDigest
	}
	return nil
}

func (m *CPUTimeRecord) GetRecordListTimestampSec() []uint64 {
	if m != nil {
		return m.RecordListTimestampSec
	}
	return nil
}

func (m *CPUTimeRecord) GetRecordListCpuTimeMs() []uint32 {
	if m != nil {
		return m.RecordListCpuTimeMs
	}
	return nil
}

func (m *CPUTimeRecord) GetIsInternalSql() bool {
	if m != nil {
		return m.IsInternalSql
	}
	return false
}

type SQLMeta struct {
	SqlDigest     []byte `protobuf:"bytes,1,opt,name=sql_digest,json=sqlDigest,proto3" json:"sql_digest,omitempty"`
	NormalizedSql string `protobuf:"bytes,2,opt,name=normalized_sql,json=normalizedSql,proto3" json:"normalized_sql,omitempty"`
}

func (m *SQLMeta) Reset()                    { *m = SQLMeta{} }
func (m *SQLMeta) String() string            { return proto.CompactTextString(m) }
func (*SQLMeta) ProtoMessage()               {}
func (*SQLMeta) Descriptor() ([]byte, []int) { return fileDescriptorTopsqlAgent, []int{1} }

func (m *SQLMeta) GetSqlDigest() []byte {
	if m != nil {
		return m.SqlDigest
	}
	return nil
}

func (m *SQLMeta) GetNormalizedSql() string {
	if m != nil {
		return m.NormalizedSql
	}
	return ""
}

type PlanMeta struct {
	PlanDigest     []byte `protobuf:"bytes,1,opt,name=plan_digest,json=planDigest,proto3" json:"plan_digest,omitempty"`
	NormalizedPlan string `protobuf:"bytes,2,opt,name=normalized_plan,json=normalizedPlan,proto3" json:"normalized_plan,omitempty"`
}

func (m *PlanMeta) Reset()                    { *m = PlanMeta{} }
func (m *PlanMeta) String() string            { return proto.CompactTextString(m) }
func (*PlanMeta) ProtoMessage()               {}
func (*PlanMeta) Descriptor() ([]byte, []int) { return fileDescriptorTopsqlAgent, []int{2} }

func (m *PlanMeta) GetPlanDigest() []byte {
	if m != nil {
		return m.PlanDigest
	}
	return nil
}

func (m *PlanMeta) GetNormalizedPlan() string {
	if m != nil {
		return m.NormalizedPlan
	}
	return ""
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptorTopsqlAgent, []int{3} }

func init() {
	proto.RegisterType((*CPUTimeRecord)(nil), "tipb.CPUTimeRecord")
	proto.RegisterType((*SQLMeta)(nil), "tipb.SQLMeta")
	proto.RegisterType((*PlanMeta)(nil), "tipb.PlanMeta")
	proto.RegisterType((*EmptyResponse)(nil), "tipb.EmptyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TopSQLAgent service

type TopSQLAgentClient interface {
	// ReportCPUTimeRecords is called periodically (e.g. per minute) to save the in-memory TopSQL records
	ReportCPUTimeRecords(ctx context.Context, opts ...grpc.CallOption) (TopSQLAgent_ReportCPUTimeRecordsClient, error)
	// ReportSQLMeta reports SQL meta to the agent.
	// The agent should ensure that the SQL meta exists before sending the SQL CPU time records to the remote database.
	ReportSQLMeta(ctx context.Context, opts ...grpc.CallOption) (TopSQLAgent_ReportSQLMetaClient, error)
	// ReportPlanMeta reports plan meta to the agent.
	// The agent should deal with plan meta similarly to SQL meta.
	ReportPlanMeta(ctx context.Context, opts ...grpc.CallOption) (TopSQLAgent_ReportPlanMetaClient, error)
}

type topSQLAgentClient struct {
	cc *grpc.ClientConn
}

func NewTopSQLAgentClient(cc *grpc.ClientConn) TopSQLAgentClient {
	return &topSQLAgentClient{cc}
}

func (c *topSQLAgentClient) ReportCPUTimeRecords(ctx context.Context, opts ...grpc.CallOption) (TopSQLAgent_ReportCPUTimeRecordsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TopSQLAgent_serviceDesc.Streams[0], c.cc, "/tipb.TopSQLAgent/ReportCPUTimeRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &topSQLAgentReportCPUTimeRecordsClient{stream}
	return x, nil
}

type TopSQLAgent_ReportCPUTimeRecordsClient interface {
	Send(*CPUTimeRecord) error
	CloseAndRecv() (*EmptyResponse, error)
	grpc.ClientStream
}

type topSQLAgentReportCPUTimeRecordsClient struct {
	grpc.ClientStream
}

func (x *topSQLAgentReportCPUTimeRecordsClient) Send(m *CPUTimeRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *topSQLAgentReportCPUTimeRecordsClient) CloseAndRecv() (*EmptyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topSQLAgentClient) ReportSQLMeta(ctx context.Context, opts ...grpc.CallOption) (TopSQLAgent_ReportSQLMetaClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TopSQLAgent_serviceDesc.Streams[1], c.cc, "/tipb.TopSQLAgent/ReportSQLMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &topSQLAgentReportSQLMetaClient{stream}
	return x, nil
}

type TopSQLAgent_ReportSQLMetaClient interface {
	Send(*SQLMeta) error
	CloseAndRecv() (*EmptyResponse, error)
	grpc.ClientStream
}

type topSQLAgentReportSQLMetaClient struct {
	grpc.ClientStream
}

func (x *topSQLAgentReportSQLMetaClient) Send(m *SQLMeta) error {
	return x.ClientStream.SendMsg(m)
}

func (x *topSQLAgentReportSQLMetaClient) CloseAndRecv() (*EmptyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topSQLAgentClient) ReportPlanMeta(ctx context.Context, opts ...grpc.CallOption) (TopSQLAgent_ReportPlanMetaClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TopSQLAgent_serviceDesc.Streams[2], c.cc, "/tipb.TopSQLAgent/ReportPlanMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &topSQLAgentReportPlanMetaClient{stream}
	return x, nil
}

type TopSQLAgent_ReportPlanMetaClient interface {
	Send(*PlanMeta) error
	CloseAndRecv() (*EmptyResponse, error)
	grpc.ClientStream
}

type topSQLAgentReportPlanMetaClient struct {
	grpc.ClientStream
}

func (x *topSQLAgentReportPlanMetaClient) Send(m *PlanMeta) error {
	return x.ClientStream.SendMsg(m)
}

func (x *topSQLAgentReportPlanMetaClient) CloseAndRecv() (*EmptyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TopSQLAgent service

type TopSQLAgentServer interface {
	// ReportCPUTimeRecords is called periodically (e.g. per minute) to save the in-memory TopSQL records
	ReportCPUTimeRecords(TopSQLAgent_ReportCPUTimeRecordsServer) error
	// ReportSQLMeta reports SQL meta to the agent.
	// The agent should ensure that the SQL meta exists before sending the SQL CPU time records to the remote database.
	ReportSQLMeta(TopSQLAgent_ReportSQLMetaServer) error
	// ReportPlanMeta reports plan meta to the agent.
	// The agent should deal with plan meta similarly to SQL meta.
	ReportPlanMeta(TopSQLAgent_ReportPlanMetaServer) error
}

func RegisterTopSQLAgentServer(s *grpc.Server, srv TopSQLAgentServer) {
	s.RegisterService(&_TopSQLAgent_serviceDesc, srv)
}

func _TopSQLAgent_ReportCPUTimeRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TopSQLAgentServer).ReportCPUTimeRecords(&topSQLAgentReportCPUTimeRecordsServer{stream})
}

type TopSQLAgent_ReportCPUTimeRecordsServer interface {
	SendAndClose(*EmptyResponse) error
	Recv() (*CPUTimeRecord, error)
	grpc.ServerStream
}

type topSQLAgentReportCPUTimeRecordsServer struct {
	grpc.ServerStream
}

func (x *topSQLAgentReportCPUTimeRecordsServer) SendAndClose(m *EmptyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *topSQLAgentReportCPUTimeRecordsServer) Recv() (*CPUTimeRecord, error) {
	m := new(CPUTimeRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TopSQLAgent_ReportSQLMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TopSQLAgentServer).ReportSQLMeta(&topSQLAgentReportSQLMetaServer{stream})
}

type TopSQLAgent_ReportSQLMetaServer interface {
	SendAndClose(*EmptyResponse) error
	Recv() (*SQLMeta, error)
	grpc.ServerStream
}

type topSQLAgentReportSQLMetaServer struct {
	grpc.ServerStream
}

func (x *topSQLAgentReportSQLMetaServer) SendAndClose(m *EmptyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *topSQLAgentReportSQLMetaServer) Recv() (*SQLMeta, error) {
	m := new(SQLMeta)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TopSQLAgent_ReportPlanMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TopSQLAgentServer).ReportPlanMeta(&topSQLAgentReportPlanMetaServer{stream})
}

type TopSQLAgent_ReportPlanMetaServer interface {
	SendAndClose(*EmptyResponse) error
	Recv() (*PlanMeta, error)
	grpc.ServerStream
}

type topSQLAgentReportPlanMetaServer struct {
	grpc.ServerStream
}

func (x *topSQLAgentReportPlanMetaServer) SendAndClose(m *EmptyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *topSQLAgentReportPlanMetaServer) Recv() (*PlanMeta, error) {
	m := new(PlanMeta)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TopSQLAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tipb.TopSQLAgent",
	HandlerType: (*TopSQLAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportCPUTimeRecords",
			Handler:       _TopSQLAgent_ReportCPUTimeRecords_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportSQLMeta",
			Handler:       _TopSQLAgent_ReportSQLMeta_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportPlanMeta",
			Handler:       _TopSQLAgent_ReportPlanMeta_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "topsql_agent.proto",
}

func (m *CPUTimeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPUTimeRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SqlDigest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(len(m.SqlDigest)))
		i += copy(dAtA[i:], m.SqlDigest)
	}
	if len(m.PlanDigest) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(len(m.PlanDigest)))
		i += copy(dAtA[i:], m.PlanDigest)
	}
	if len(m.RecordListTimestampSec) > 0 {
		dAtA2 := make([]byte, len(m.RecordListTimestampSec)*10)
		var j1 int
		for _, num := range m.RecordListTimestampSec {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.RecordListCpuTimeMs) > 0 {
		dAtA4 := make([]byte, len(m.RecordListCpuTimeMs)*10)
		var j3 int
		for _, num := range m.RecordListCpuTimeMs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.IsInternalSql {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsInternalSql {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SQLMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SqlDigest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(len(m.SqlDigest)))
		i += copy(dAtA[i:], m.SqlDigest)
	}
	if len(m.NormalizedSql) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(len(m.NormalizedSql)))
		i += copy(dAtA[i:], m.NormalizedSql)
	}
	return i, nil
}

func (m *PlanMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlanDigest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(len(m.PlanDigest)))
		i += copy(dAtA[i:], m.PlanDigest)
	}
	if len(m.NormalizedPlan) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopsqlAgent(dAtA, i, uint64(len(m.NormalizedPlan)))
		i += copy(dAtA[i:], m.NormalizedPlan)
	}
	return i, nil
}

func (m *EmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTopsqlAgent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CPUTimeRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.SqlDigest)
	if l > 0 {
		n += 1 + l + sovTopsqlAgent(uint64(l))
	}
	l = len(m.PlanDigest)
	if l > 0 {
		n += 1 + l + sovTopsqlAgent(uint64(l))
	}
	if len(m.RecordListTimestampSec) > 0 {
		l = 0
		for _, e := range m.RecordListTimestampSec {
			l += sovTopsqlAgent(uint64(e))
		}
		n += 1 + sovTopsqlAgent(uint64(l)) + l
	}
	if len(m.RecordListCpuTimeMs) > 0 {
		l = 0
		for _, e := range m.RecordListCpuTimeMs {
			l += sovTopsqlAgent(uint64(e))
		}
		n += 1 + sovTopsqlAgent(uint64(l)) + l
	}
	if m.IsInternalSql {
		n += 3
	}
	return n
}

func (m *SQLMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.SqlDigest)
	if l > 0 {
		n += 1 + l + sovTopsqlAgent(uint64(l))
	}
	l = len(m.NormalizedSql)
	if l > 0 {
		n += 1 + l + sovTopsqlAgent(uint64(l))
	}
	return n
}

func (m *PlanMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlanDigest)
	if l > 0 {
		n += 1 + l + sovTopsqlAgent(uint64(l))
	}
	l = len(m.NormalizedPlan)
	if l > 0 {
		n += 1 + l + sovTopsqlAgent(uint64(l))
	}
	return n
}

func (m *EmptyResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTopsqlAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTopsqlAgent(x uint64) (n int) {
	return sovTopsqlAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPUTimeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopsqlAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUTimeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUTimeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlDigest = append(m.SqlDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.SqlDigest == nil {
				m.SqlDigest = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanDigest = append(m.PlanDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.PlanDigest == nil {
				m.PlanDigest = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopsqlAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecordListTimestampSec = append(m.RecordListTimestampSec, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopsqlAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTopsqlAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopsqlAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecordListTimestampSec = append(m.RecordListTimestampSec, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordListTimestampSec", wireType)
			}
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopsqlAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecordListCpuTimeMs = append(m.RecordListCpuTimeMs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopsqlAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTopsqlAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopsqlAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecordListCpuTimeMs = append(m.RecordListCpuTimeMs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordListCpuTimeMs", wireType)
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInternalSql", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInternalSql = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopsqlAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopsqlAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlDigest = append(m.SqlDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.SqlDigest == nil {
				m.SqlDigest = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalizedSql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NormalizedSql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopsqlAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopsqlAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanDigest = append(m.PlanDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.PlanDigest == nil {
				m.PlanDigest = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalizedPlan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NormalizedPlan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopsqlAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopsqlAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTopsqlAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopsqlAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopsqlAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopsqlAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopsqlAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTopsqlAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTopsqlAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTopsqlAgent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTopsqlAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopsqlAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("topsql_agent.proto", fileDescriptorTopsqlAgent) }

var fileDescriptorTopsqlAgent = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0x6b, 0x5a, 0x41, 0x3b, 0x4b, 0x76, 0x25, 0x77, 0x81, 0xa5, 0x12, 0x4b, 0x14, 0x09,
	0x08, 0x97, 0x20, 0x01, 0x12, 0xea, 0x11, 0x5a, 0x0e, 0x48, 0x5b, 0xb1, 0x75, 0xc2, 0x39, 0xf2,
	0x26, 0x56, 0x64, 0xc9, 0xb1, 0x9d, 0xd8, 0x3d, 0xc0, 0x93, 0xf0, 0x46, 0x70, 0xe4, 0x11, 0xd0,
	0x72, 0xe1, 0x31, 0x90, 0x9d, 0x84, 0xee, 0x82, 0x56, 0xbd, 0x65, 0xfe, 0x7f, 0xfe, 0x2f, 0x9a,
	0x19, 0x03, 0xb6, 0x4a, 0x9b, 0x46, 0xe4, 0xb4, 0x62, 0xd2, 0x26, 0xba, 0x55, 0x56, 0xe1, 0x03,
	0xcb, 0xf5, 0xea, 0x64, 0x5a, 0xa9, 0x4a, 0x79, 0xe1, 0x85, 0xfb, 0xea, 0xbc, 0xe8, 0x37, 0x82,
	0xe0, 0x6c, 0xf9, 0x29, 0xe3, 0x35, 0x23, 0xac, 0x50, 0x6d, 0x89, 0x1f, 0x01, 0x38, 0x40, 0xc9,
	0x2b, 0x66, 0xec, 0x0c, 0x85, 0x28, 0xbe, 0x4b, 0x8e, 0x4c, 0x23, 0xce, 0xbd, 0x80, 0x1f, 0xc3,
	0x48, 0x0b, 0x2a, 0x07, 0xff, 0x96, 0xf7, 0xc1, 0x49, 0x7d, 0xc3, 0x29, 0x3c, 0x6c, 0x3d, 0x29,
	0x17, 0xdc, 0xd8, 0xdc, 0xf2, 0x9a, 0x19, 0x4b, 0x6b, 0x9d, 0x1b, 0x56, 0xcc, 0x20, 0xdc, 0x8f,
	0x0f, 0xc8, 0xfd, 0xae, 0x61, 0xc1, 0x8d, 0xcd, 0x06, 0x3b, 0x65, 0x05, 0x7e, 0x0d, 0x0f, 0x36,
	0xa3, 0x85, 0xbe, 0xf2, 0xf1, 0xbc, 0x36, 0xb3, 0x51, 0xb8, 0x1f, 0x07, 0xe4, 0xf8, 0x3a, 0x78,
	0xa6, 0xaf, 0x5c, 0xf6, 0xc2, 0xe0, 0xa7, 0x30, 0xe1, 0x26, 0xe7, 0xd2, 0xb2, 0x56, 0x52, 0x91,
	0x9b, 0x46, 0xcc, 0xa6, 0x21, 0x8a, 0x0f, 0x49, 0xc0, 0xcd, 0x87, 0x5e, 0x4d, 0x1b, 0x11, 0x7d,
	0x84, 0x3b, 0xe9, 0xe5, 0xe2, 0x82, 0x59, 0x7a, 0xd3, 0x8c, 0x4f, 0x60, 0x2c, 0x55, 0x5b, 0x53,
	0xc1, 0xbf, 0xb0, 0xd2, 0x03, 0xdd, 0x98, 0x47, 0x24, 0xb8, 0x56, 0x1d, 0x30, 0x83, 0xc3, 0xa5,
	0xa0, 0xd2, 0x13, 0xff, 0x59, 0x0b, 0xfa, 0x6f, 0x2d, 0xcf, 0x60, 0xb2, 0xc1, 0x74, 0x46, 0x0f,
	0xdd, 0xf8, 0x95, 0xa3, 0x45, 0x13, 0x08, 0xde, 0xd7, 0xda, 0x7e, 0x26, 0xcc, 0x68, 0x25, 0x0d,
	0x7b, 0xf9, 0x0d, 0xc1, 0x28, 0x53, 0x3a, 0xbd, 0x5c, 0xbc, 0x75, 0x47, 0xc5, 0xe7, 0x30, 0x25,
	0x4c, 0xab, 0xd6, 0x6e, 0xdd, 0xcd, 0xe0, 0xe3, 0xc4, 0xdd, 0x39, 0xd9, 0x52, 0x4f, 0x7a, 0x71,
	0x8b, 0x18, 0xed, 0xc5, 0x08, 0xbf, 0x81, 0xa0, 0xa3, 0x0c, 0x3b, 0x09, 0xba, 0xce, 0xbe, 0xdc,
	0x1d, 0x3c, 0x85, 0x71, 0x17, 0xfc, 0x3b, 0xfb, 0xb8, 0x6b, 0x1d, 0xea, 0x9d, 0xd1, 0x77, 0xcf,
	0xbf, 0xaf, 0xe7, 0xe8, 0xc7, 0x7a, 0x8e, 0x7e, 0xae, 0xe7, 0xe8, 0xeb, 0xaf, 0xf9, 0x1e, 0xdc,
	0x2b, 0x54, 0x9d, 0x68, 0x2e, 0xab, 0x82, 0xea, 0xc4, 0xf2, 0x72, 0xe5, 0xa3, 0x4b, 0xb4, 0xba,
	0xed, 0x9f, 0xe7, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xc5, 0x30, 0x3d, 0xd0, 0x02,
	0x00, 0x00,
}
